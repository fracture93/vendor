<Ui xmlns="http://www.blizzard.com/wow/ui/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.blizzard.com/wow/ui/..\FrameXML\UI.xsd">

    <!--
        Vendor.Options.SmallCheckTemplate
            This template is a smaller version of the check template, which contains only a label in the
            normal font color. We use this for secondary options which don't need additional display text
    -->
    <Frame name="Vendor_Setting_Check_Small" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString parentKey="Label" inherits="GameFontHighlight" justifyH="LEFT" JustifyV="CENTER">
                    <Anchors>
                        <Anchor point="TOPLEFT" x="20" y="0"/>>
                        <Anchor point="BOTTOMRIGHT" relativePoint="TOPRIGHT" x="0" y="-16"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Text" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT"  x="20" y="-20"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="0"/>
                    </Anchors>
                </FontString>				
            </Layer>
        </Layers>
        <Frames>
            <CheckButton parentKey="State" inherits="OptionsBaseCheckButtonTemplate">
                <Size x="16" y="16"/>
                <Anchors>
                    <Anchor point="TOPLEFT" x="0" y="0"/>
                </Anchors>
                <Scripts>
                    <OnClick>
						local handler = self:GetParent().OnChange
						if (handler) then
							handler(self:GetChecked())
						end
					</OnClick>
                    <OnEnable>
                        self:GetParent().Label:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnEnable>
                    <OnDisable>
                        self:GetParent().Label:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnDisable>
                </Scripts>
            </CheckButton>
        </Frames>
		<Scripts>
			<OnLoad>
				self.Label.LocKey = self.LabelLocKey
				if (self.TextLocKey) then 
					self.Text.LocKey = self.TextLocKey
				else
					self.Text:Hide()
				end
				self.Enable = function(_)
					self.State:Enable()
				end
				self.Disable = function(_)
					self.State:Disable()
				end
				self.SetChecked = function(_, state)				
					self.State:SetChecked(state == true)
				end
			</OnLoad>
		</Scripts>
    </Frame>

    <!--
        Vendor.Options.SmallCheckTemplate.WithText
            This template is a smaller version of the check template, which contains both a label
            and also the description text. are rendered in the normal font color to indicate
            that it's a secondary option.
    -->
    <Frame name="Vendor_Setting_Checkbox" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString parentKey="Label" inherits="GameFontHighlightLarge" justifyH="LEFT" JustifyV="CENTER">
                    <Anchors>
                        <Anchor point="TOPLEFT" x="28" y="0"/>>
                        <Anchor point="BOTTOMRIGHT" x="0" y="-20" relativePoint="TOPRIGHT"/>
                    </Anchors>
                </FontString>
                <FontString parentKey="Text" inherits="GameFontNormalSmall" justifyH="LEFT" justifyV="TOP">
                    <Anchors>
                        <Anchor point="TOPLEFT"  x="28" y="-24"/>
                        <Anchor point="BOTTOMRIGHT" x="0" y="0"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <Frames>
            <CheckButton parentKey="State" inherits="OptionsBaseCheckButtonTemplate">
                <Size x="24" y="24"/>
                <Anchors>
                    <Anchor point="TOPLEFT" x="0" y="0"/>
                </Anchors>
                <Scripts>
                    <OnClick>
						local handler = self:GetParent().OnChange
						if (handler) then
							handler(self:GetChecked())
						end
					</OnClick>
                    <OnEnable>
                        self:GetParent().Label:SetTextColor(HIGHLIGHT_FONT_COLOR.r, HIGHLIGHT_FONT_COLOR.g, HIGHLIGHT_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(NORMAL_FONT_COLOR.r, NORMAL_FONT_COLOR.g, NORMAL_FONT_COLOR.b)
                    </OnEnable>
                    <OnDisable>
                        self:GetParent().Label:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                        self:GetParent().Text:SetTextColor(DISABLED_FONT_COLOR.r, DISABLED_FONT_COLOR.g, DISABLED_FONT_COLOR.b)
                    </OnDisable>
                </Scripts>
            </CheckButton>
        </Frames>
		<Scripts>
			<OnLoad>
				self.Label.LocKey = self.LabelLocKey
				if (self.TextLocKey) then
					self.Text.LocKey = self.TextLocKey
				else
					self.Text:Hide()
				end
				self.Enable = function(_)
					self.State:Enable()
				end
				self.Disable = function(_)
					self.State:Disable()
				end
				self.SetChecked = function(_, state)				
					self.State:SetChecked(state == true)
				end
                self.SetEnabled = function(_, state)
                    if (state) then
                        self.State:Enable()
                    else
                        self.State:Disable()
                    end
                end
			</OnLoad>
		</Scripts>
    </Frame>	

    <Frame name="Vendor_Settings_Panel" virtual="true">
        <Layers>
            <Layer level="ARTWORK">
                <FontString  parentKey="HelpText" inherits="GameFontHighlight" JustifyV="TOP" JustifyH="LEFT">
                    <Size x="10" y="60"/>
                    <Anchors>
                        <Anchor point="TOPLEFT" x="16" y="-16"/>
                        <Anchor point="TOPRIGHT" x="-16" y="-16"/>
                    </Anchors>
                </FontString>
            </Layer>
        </Layers>
        <Frames>
            <Frame hidden="true">
                <Scripts>
                    <OnLoad>
                        self:GetParent():Hide()
                        local helpText = self:GetParent().HelpText
                        local lockey =self:GetParent().HelpTextLocKey

                        if (type(lockey) == "string") then
                            helpText.LocKey = lockey
                        else
                            helpText:Hide()
                            helpText:SetHeight(0)
                        end
                    </OnLoad>
                </Scripts>
            </Frame>
        </Frames>
    </Frame>

</Ui>
